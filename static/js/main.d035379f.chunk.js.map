{"version":3,"sources":["data/images/tree.png","data/images/fish.png","data/images/bird.png","data/images/life.png","data/images/lost_life.png","components/game/Game.tsx","store/game/types.ts","App.tsx","serviceWorker.ts","lib/util.ts","store/game/reducers.ts","store/root/reducers.ts","index.tsx"],"names":["module","exports","wrongSounds","Audio","retrySounds","victorySounds","gameOverSounds","Game","playRandomSound","soundList","Math","floor","random","length","play","then","catch","error","console","log","gameState","useSelector","state","game","dispatch","useDispatch","giveAnswer","event","currentTarget","dataset","answer","questions","currentQuestionIndex","type","lifes","i","map","item","className","src","life","lostLife","name","data-answer","style","onClick","fish","tree","bird","App","path","Boolean","window","location","hostname","match","shuffle","array","temporaryValue","randomIndex","currentIndex","initialState","questionsList","score","gameReducer","action","rootReducer","combineReducers","store","createStore","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"w5FAAAA,EAAOC,QAAU,IAA0B,kC,mBCA3CD,EAAOC,QAAU,IAA0B,kC,mBCA3CD,EAAOC,QAAU,IAA0B,kC,mBCA3CD,EAAOC,QAAU,IAA0B,kC,mBCA3CD,EAAOC,QAAU,IAA0B,uC,iTCcrCC,EAAc,CAClB,IAAIC,MAAM,6BACV,IAAIA,MAAM,6BACV,IAAIA,MAAM,6BACV,IAAIA,MAAM,6BACV,IAAIA,MAAM,8BAGNC,EAAc,CAClB,IAAID,MAAM,8BAGNE,EAAgB,CACpB,IAAIF,MAAM,iCACV,IAAIA,MAAM,iCACV,IAAIA,MAAM,kCAGNG,EAAiB,CACrB,IAAIH,MAAM,oCACV,IAAIA,MAAM,oCACV,IAAIA,MAAM,oCACV,IAAIA,MAAM,oCACV,IAAIA,MAAM,qCAsGGI,EAnGF,WA+CX,IA7CA,IAAMC,EAAkB,SAACC,GACXA,EAAUC,KAAKC,MAAMD,KAAKE,SAAWH,EAAUI,SACrDC,OACHC,MAAK,eACLC,OAAM,SAACC,GACNC,QAAQC,IAAIF,OAIZG,EAAYC,aAAY,SAACC,GAAD,OAAsBA,EAAMC,QACpDC,EAAWC,cAEXC,EAAa,SAACC,GAELA,EAAMC,cAAcC,QAAQC,SAE1BV,EAAUW,UAAUX,EAAUY,sBAAsBF,OAEjEN,EAAS,CAACS,KC9Cc,mBDgDpBb,EAAUc,MAAQ,EACpB1B,EAAgBN,GAEhBM,EAAgBF,GAIhBc,EAAUW,UAAUlB,SAAWO,EAAUY,qBAAuB,GAAKZ,EAAUc,MAAQ,GACzF1B,EAAgBH,GAGlBmB,EAAS,CAACS,KC5DmB,uBDwE3BC,EAAkB,CAAC,EAAE,EAAE,EAAE,EAAE,GAEtBC,EAAE,EAAGA,EAAIf,EAAUc,MAAOC,IACjCD,EAAMC,GAAK,EAGb,OAAIf,EAAUc,MAAQ,EAEhBd,EAAUW,UAAUlB,OAASO,EAAUY,qBAKvC,6BACE,uDACA,6BAEIE,EAAME,KAAI,SAACC,GACT,OAAa,IAATA,EACK,yBAAKC,UAAW,aAAcC,IAAKC,MACxB,IAATH,EACF,yBAAKC,UAAW,aAAcC,IAAKE,WADrC,KAKX,kDAAwBrB,EAAUW,UAAUlB,OAASO,EAAUY,sBAC/D,6CAAmBZ,EAAUW,UAAUX,EAAUY,sBAAsBU,KAAvE,OAEF,4BAAQJ,UAAW,cAAeK,cAAY,QAAQC,MAAO,CAAC,gBAAmB,QAASC,QAASnB,GAAY,oCAAY,yBAAKa,IAAKO,OACrI,4BAAQR,UAAW,cAAeK,cAAY,OAAOC,MAAO,CAAC,gBAAmB,SAAUC,QAASnB,GAAY,mCAAW,yBAAKa,IAAKQ,OACpI,4BAAQT,UAAW,cAAeK,cAAY,QAAQC,MAAO,CAAC,gBAAmB,OAAQC,QAASnB,GAAY,oCAAY,yBAAKa,IAAKS,QAMtI,6BACE,kDACA,4BAAQH,QA1CO,WACrBrB,EAAS,CAACS,KCtEkB,uBD+GtB,0BAQJ,6BACE,mCACA,4BAAQY,QAzDU,WACtBrC,EAAgBJ,GAChBoB,EAAS,CAACS,KClEkB,uBDyHxB,qBE/GOgB,MAdf,WACE,OACE,kBAAC,IAAD,KACE,yBAAKX,UAAU,OACb,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOY,KAAK,IACV,kBAAC,EAAD,WCFQC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,0BCdOC,G,MAAU,SAACC,GAMtB,IALA,IACIC,EACAC,EAFAC,EAAeH,EAAM5C,OAKlB,IAAM+C,GAGXD,EAAcjD,KAAKC,MAAMD,KAAKE,SAAWgD,GAIzCF,EAAiBD,EAHjBG,GAAgB,GAIhBH,EAAMG,GAAgBH,EAAME,GAC5BF,EAAME,GAAeD,EAGvB,OAAOD,ICjBHI,EAA0B,CAC9B9B,UAAWyB,EAAQM,GACnB9B,qBAAsB,EACtB+B,MAAO,EACP7B,MAAO,GAoCM8B,EAjCK,WAA+D,IAA9D1C,EAA6D,uDAArDuC,EAAcI,EAAuC,uCAChF,OAAQA,EAAOhC,MACb,IJF4B,mBIG1B,MAAO,CACLF,UAAWyB,EAAQM,GACnB9B,qBAAsB,EACtB+B,MAAO,EACP7B,MAAO,GAGX,IJT6B,oBIU3B,OAAO,2BACFZ,GADL,IAEEU,qBAAsBV,EAAMU,qBAAuB,IAGvD,IJd0B,iBIexB,OAAO,2BACFV,GADL,IAEEyC,MAAOzC,EAAMyC,MAAQ,IAGzB,IJnBuB,cIoBrB,OAAO,2BACFzC,GADL,IAEEY,MAAOZ,EAAMY,MAAQ,IAGzB,QACE,OAAOZ,IClCE4C,EAJKC,YAAgB,CAClC5C,KAAMyC,ICMFI,EAAQC,YAAYH,GAE1BI,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,CAAUJ,MAAOA,GACf,kBAAC,EAAD,QAGJK,SAASC,eAAe,SJyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB9D,MAAK,SAAA+D,GACJA,EAAaC,gBAEd/D,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAM+D,c","file":"static/js/main.d035379f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/tree.f13684d3.png\";","module.exports = __webpack_public_path__ + \"static/media/fish.482e093c.png\";","module.exports = __webpack_public_path__ + \"static/media/bird.8f93aab9.png\";","module.exports = __webpack_public_path__ + \"static/media/life.ad1ab079.png\";","module.exports = __webpack_public_path__ + \"static/media/lost_life.ae020acc.png\";","import React from 'react'\r\n\r\nimport './Game.css'\r\nimport tree from '../../data/images/tree.png'\r\nimport fish from '../../data/images/fish.png'\r\nimport bird from '../../data/images/bird.png'\r\n\r\nimport life from '../../data/images/life.png'\r\nimport lostLife from '../../data/images/lost_life.png'\r\n\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { rootState } from '../../store/root/types'\r\nimport { INCREASE_SCORE, GET_NEXT_QUESTION, REMOVE_LIFE, RESET_GAME_STATE} from '../../store/game/types'\r\n\r\nconst wrongSounds = [\r\n  new Audio('/sounds/wrong/wrong_1.mp3'),\r\n  new Audio('/sounds/wrong/wrong_2.mp3'),\r\n  new Audio('/sounds/wrong/wrong_3.mp3'),\r\n  new Audio('/sounds/wrong/wrong_4.mp3'),\r\n  new Audio('/sounds/wrong/wrong_5.mp3')\r\n]\r\n\r\nconst retrySounds = [\r\n  new Audio('/sounds/retry/retry_1.mp3')\r\n]\r\n\r\nconst victorySounds = [\r\n  new Audio('/sounds/victory/victory_1.mp3'),\r\n  new Audio('/sounds/victory/victory_2.mp3'),\r\n  new Audio('/sounds/victory/victory_3.mp3')\r\n]\r\n\r\nconst gameOverSounds = [\r\n  new Audio('sounds/game_over/game_over_1.mp3'),\r\n  new Audio('sounds/game_over/game_over_2.mp3'),\r\n  new Audio('sounds/game_over/game_over_3.mp3'),\r\n  new Audio('sounds/game_over/game_over_4.mp3'),\r\n  new Audio('sounds/game_over/game_over_5.mp3')\r\n]\r\n\r\nconst Game = () => {\r\n\r\n  const playRandomSound = (soundList: HTMLAudioElement[]) => {\r\n    let sound = soundList[Math.floor(Math.random() * soundList.length)]\r\n    sound.play()\r\n      .then(() => {})\r\n      .catch((error) => {\r\n        console.log(error)\r\n      })\r\n  }\r\n\r\n  const gameState = useSelector((state: rootState) => state.game)\r\n  const dispatch = useDispatch()\r\n\r\n  const giveAnswer = (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\r\n\r\n    let answer = event.currentTarget.dataset.answer\r\n\r\n    if (answer === gameState.questions[gameState.currentQuestionIndex].answer) {\r\n      \r\n      dispatch({type: INCREASE_SCORE})\r\n    } else {\r\n      if (gameState.lifes > 1) {\r\n        playRandomSound(wrongSounds)\r\n      } else {\r\n        playRandomSound(gameOverSounds)\r\n      }\r\n      //dispatch({type: REMOVE_LIFE})\r\n    }\r\n    if (gameState.questions.length === gameState.currentQuestionIndex + 1 && gameState.lifes > 0) {\r\n      playRandomSound(victorySounds)\r\n    }\r\n\r\n    dispatch({type: GET_NEXT_QUESTION})\r\n  }\r\n\r\n  const restartLostGame = () => {\r\n    playRandomSound(retrySounds)\r\n    dispatch({type: RESET_GAME_STATE})\r\n  }\r\n\r\n  const restartWonGame = () => {\r\n    dispatch({type: RESET_GAME_STATE})\r\n  }\r\n\r\n  let lifes: number[] = [0,0,0,0,0]\r\n\r\n  for (let i=0; i < gameState.lifes; i++) {\r\n    lifes[i] = 1\r\n  }\r\n\r\n  if (gameState.lifes > 0) {\r\n\r\n    if (gameState.questions.length > gameState.currentQuestionIndex) {\r\n\r\n      // Game is ongoing\r\n\r\n      return (\r\n        <div>\r\n          <h1>Fisch, Baum oder Vogel?</h1>\r\n          <div>\r\n            {\r\n              lifes.map((item) => {\r\n                if (item === 1) {\r\n                  return <img className={'life-image'} src={life}></img>\r\n                } else if (item === 0) {\r\n                  return <img className={'life-image'} src={lostLife}></img>\r\n                }\r\n              })\r\n            }\r\n            <p>Verbleibende Namen: {gameState.questions.length - gameState.currentQuestionIndex}</p>\r\n            <h3>Was ist ein/e {gameState.questions[gameState.currentQuestionIndex].name} ?</h3>\r\n          </div>\r\n          <button className={'game-button'} data-answer='Fisch' style={{'backgroundColor': 'blue'}} onClick={giveAnswer}><p>Fisch</p><img src={fish}></img></button>\r\n          <button className={'game-button'} data-answer='Baum' style={{'backgroundColor': 'green'}} onClick={giveAnswer}><p>Baum</p><img src={tree}></img></button>\r\n          <button className={'game-button'} data-answer='Vogel' style={{'backgroundColor': 'red'}} onClick={giveAnswer}><p>Vogel</p><img src={bird}></img></button>\r\n        </div>\r\n      )\r\n    } else {\r\n      // Game is won\r\n      return (\r\n        <div>\r\n          <h1>Echt geil gemacht!</h1>\r\n          <button onClick={restartWonGame}>Lass mich nochmal ran</button>\r\n        </div>\r\n      )\r\n\r\n    }\r\n  } else {\r\n    // Game is lost\r\n    return (\r\n      <div>\r\n        <h1>rip</h1>\r\n        <button onClick={restartLostGame}>Ich schaffe das</button>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Game","export interface Question {\r\n  name: string\r\n  answer: string\r\n}\r\n\r\nexport interface GameState {\r\n  questions: Question[],\r\n  currentQuestionIndex: number,\r\n  score: number,\r\n  lifes: number\r\n}\r\n\r\nexport const RESET_GAME_STATE = 'RESET_GAME_STATE'\r\nexport const GET_NEXT_QUESTION = 'GET_NEXT_QUESTION'\r\nexport const INCREASE_SCORE = 'INCREASE_SCORE'\r\nexport const REMOVE_LIFE = 'REMOVE_LIFE'\r\n\r\ninterface ResetGameStateAction {\r\n  type: typeof RESET_GAME_STATE\r\n}\r\n\r\ninterface GetNextQuestionAction {\r\n  type: typeof GET_NEXT_QUESTION\r\n}\r\n\r\ninterface IncreaseScoreAction {\r\n  type: typeof INCREASE_SCORE\r\n}\r\n\r\ninterface RemoveLifeAction {\r\n  type: typeof REMOVE_LIFE\r\n}\r\n\r\nexport type GameActionTypes = ResetGameStateAction | GetNextQuestionAction | IncreaseScoreAction | RemoveLifeAction","import React from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\n\r\nimport { Switch, Route, BrowserRouter as Router} from 'react-router-dom'\r\n\r\nimport Game from './components/game/Game'\r\n\r\nfunction App() {\r\n  return (\r\n    <Router>\r\n      <div className=\"App\">\r\n        <Switch>\r\n          <Route path=''>\r\n            <Game/>\r\n          </Route>\r\n        </Switch>\r\n      </div>\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import listReactFiles from 'list-react-files'\r\n\r\n// https://stackoverflow.com/questions/2450954/how-to-randomize-shuffle-a-javascript-array\r\n\r\nexport const shuffle = (array: any[]) => {\r\n  let currentIndex = array.length\r\n  let temporaryValue\r\n  let randomIndex\r\n\r\n  // While there remain elements to shuffle...\r\n  while (0 !== currentIndex) {\r\n\r\n    // Pick a remaining element...\r\n    randomIndex = Math.floor(Math.random() * currentIndex)\r\n    currentIndex -= 1\r\n\r\n    // And swap it with the current element.\r\n    temporaryValue = array[currentIndex]\r\n    array[currentIndex] = array[randomIndex]\r\n    array[randomIndex] = temporaryValue\r\n  }\r\n\r\n  return array\r\n}\r\n\r\nexport const playRandomSound = (soundType: string) => {\r\n\r\n  switch(soundType) {\r\n\r\n    case 'wrong':\r\n      console.log(listReactFiles('../data/sounds/wrong'))\r\n      break\r\n\r\n  }\r\n\r\n}","import { Question, RESET_GAME_STATE, GET_NEXT_QUESTION, INCREASE_SCORE, REMOVE_LIFE, GameState, GameActionTypes } from './types'\r\n\r\nimport questionsList from '../../data/questions.json'\r\nimport { shuffle } from '../../lib/util'\r\n\r\nconst initialState: GameState = {\r\n  questions: shuffle(questionsList),\r\n  currentQuestionIndex: 0,\r\n  score: 0,\r\n  lifes: 5\r\n}\r\n\r\nconst gameReducer = (state = initialState, action: GameActionTypes): GameState => {\r\n  switch (action.type) {\r\n    case RESET_GAME_STATE:\r\n      return {\r\n        questions: shuffle(questionsList),\r\n        currentQuestionIndex: 0,\r\n        score: 0,\r\n        lifes: 5\r\n      }\r\n      break\r\n    case GET_NEXT_QUESTION:\r\n      return {\r\n        ...state,\r\n        currentQuestionIndex: state.currentQuestionIndex + 1\r\n      }\r\n      break\r\n    case INCREASE_SCORE:\r\n      return {\r\n        ...state,\r\n        score: state.score + 1\r\n      }\r\n      break\r\n    case REMOVE_LIFE:\r\n      return {\r\n        ...state,\r\n        lifes: state.lifes - 1\r\n      }\r\n      break\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nexport default gameReducer","import gameReducer from '../game/reducers'\r\nimport { combineReducers } from 'redux'\r\n\r\nconst rootReducer = combineReducers({\r\n  game: gameReducer\r\n})\r\n\r\nexport default rootReducer","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nimport { Provider } from 'react-redux'\r\nimport { createStore } from 'redux'\r\nimport rootReducer from './store/root/reducers'\r\n\r\nconst store = createStore(rootReducer)\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}